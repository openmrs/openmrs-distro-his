<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.ozonehis</groupId>
    <artifactId>maven-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <groupId>org.openmrs</groupId>
  <artifactId>distro-his</artifactId>
  <version>1.0.0-SNAPSHOT</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <docker.push.registry.username>openmrs</docker.push.registry.username>

    <!-- Bundled Docker overrides -->
    <bundled.docker.compose.output.filename>docker-compose.yml</bundled.docker.compose.output.filename>
    <bundled.docker.compose.sso.enabled>true</bundled.docker.compose.sso.enabled>

    <labonfhir.omod.version>1.5.3</labonfhir.omod.version>
    <openelis.version>3.2.0.2</openelis.version>
    <referencedemodata.omod.version>2.6.0</referencedemodata.omod.version>
  </properties>

  <dependencies>
      <dependency>
          <groupId>org.openmrs.module</groupId>
          <artifactId>labonfhir-omod</artifactId>
          <version>${labonfhir.omod.version}</version>
      </dependency>
      <dependency>
          <groupId>org.openmrs.module</groupId>
          <artifactId>referencedemodata-omod</artifactId>
          <version>${referencedemodata.omod.version}</version>
      </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <!-- Exclude files from Ozone -->
            <id>Exclude unneeded Ozone files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/ozone</directory>
                  <excludes>
                    <exclude>distro/configs/openmrs/frontend_config/ozone_logo*.svg</exclude>
                    <exclude>distro/configs/openmrs/initializer_config/globalproperties/**/disable-demo-patients.xml</exclude>

                    <!-- Exclude 'referencedemodata-2.5.0.omod' coming from Ref App in favor of 2.6.0 (needed for filtering demo patients out of OEG integration) -->
                    <exclude>distro/binaries/openmrs/modules/referencedemodata-2.5.0.omod</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy over the content-packages.txt file -->
            <id>Copy content-packages.txt</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/scripts/openmrs/
              </outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <includes>
                    <include>content-packages.txt</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy over the Docker Compose override file -->
            <id>Copy docker-compose-override.yml</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/run/docker/
              </outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <includes>
                    <include>docker-compose-override.yml</include>
                    <include>docker-compose-openelis.yml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <!-- Copy over the OpenELIS volume directory -->
            <id>Copy OpenELIS files and directories</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/run/docker/
              </outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/openelis-docker-${openelis.version}</directory>
                  <includes>
                    <include>volumes/**</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <!-- Override the inherited Maven Parent plugin execution to exclude Superset configs -->
            <!-- Override with local config files -->
            <id>Copy local resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/distro/configs</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/configs</directory>
                  <excludes>
                    <exclude>.gitkeep</exclude>
                    <exclude>openmrs/initializer_config/</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <!-- Copy binaries folder -->
            <id>Copy binaries folder</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/distro/binaries</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/binaries</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
            <!-- Copy and rename OpenELIS docker-compose.yml to docker-compose-openelis.yml -->
          <execution>
            <id>rename and copy OpenELIS docker-compose.yml</id>
            <phase>process-resources</phase>
            <configuration>
              <target>
                <copy file="${project.build.directory}/openelis-docker-${openelis.version}/docker-compose.yml"
                      tofile="${project.build.directory}/${project.artifactId}-${project.version}/run/docker/docker-compose-openelis.yml" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

            <!-- Overwrite OpenELIS common.properties -->
          <execution>
            <id>override-config-in-volumes</id>
            <phase>process-resources</phase>
            <configuration>
              <target>
                <copy file="${project.basedir}/configs/openelis/common.properties"
                      tofile="${project.build.directory}/${project.artifactId}-${project.version}/run/docker/volumes/properties/common.properties"
                      overwrite="true"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

            <!-- Remove labonfhir globalproperties based on environment -->
            <execution>
                <id>Delete labonfhir globalproperties depending on place of deployment</id>
                <phase>package</phase>
                <configuration>
                    <target>
                        <!-- Use this when running with OpenELIS Global locally -->
                        <!--<delete file="${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config/globalproperties/03_distro-his/labonfhir-dev-server.xml"/>-->

                        <!-- Disable this when running with OpenELIS Global locally -->
                        <delete file="${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config/globalproperties/03_distro-his/labonfhir-local.xml"/>
                    </target>
                </configuration>
                <goals>
                    <goal>run</goal>
                </goals>
            </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
            <!-- Download openelis-docker -->
          <execution>
            <id>download openelis-docker</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>curl</executable>
              <arguments>
                <argument>-L</argument>
                <argument>-o</argument>
                <argument>${project.build.directory}/openelis-docker-${openelis.version}.zip</argument>
                <argument>https://github.com/DIGI-UW/openelis-docker/archive/refs/tags/${openelis.version}.zip</argument>
              </arguments>
            </configuration>
          </execution>

            <!-- Extract openelis-docker -->
          <execution>
            <id>extract openelis-docker zip</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>sh</executable>
              <arguments>
                <argument>-c</argument>
                <argument>
                  unzip -o ${project.build.directory}/openelis-docker-${openelis.version}.zip -d ${project.build.directory}
                </argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <repositories>
    <repository>
      <id>mks-nexus-public</id>
      <url>https://nexus.mekomsolutions.net/repository/maven-public/</url>
    </repository>
  </repositories>

  <profiles>
    <profile>
      <id>validator</id>
      <activation>
        <jdk>1.8</jdk>
        <property>
          <name>env.CI</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- hooking the OpenMRS config validation to the integration-test phase -->
          <plugin>
            <groupId>org.openmrs.maven.plugins</groupId>
            <artifactId>openmrs-packager-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>Validate OpenMRS configuration</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>validate-configurations</goal>
                </goals>
                <configuration>
                  <sourceDir>
                    ${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config</sourceDir>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
  </profiles>
</project>
